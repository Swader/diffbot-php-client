
{"request":{"options":["mentos"],"pageUrl":"http://www.sitepoint.com/diffbot-crawling-visual-machine-learning/","api":"article","version":3},"objects":[{"date":"Sun, 27 Jul 2014 00:00:00 GMT","images":[{"naturalHeight":727,"width":749,"diffbotUri":"image|3|-851701004","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624455201.png","naturalWidth":1063,"primary":true,"height":512},{"naturalHeight":216,"width":523,"diffbotUri":"image|3|762494522","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624487602.png","naturalWidth":523,"height":216},{"naturalHeight":184,"width":664,"diffbotUri":"image|3|302236938","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624509003.png","naturalWidth":664,"height":184},{"naturalHeight":972,"width":749,"diffbotUri":"image|3|-1836356546","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624552704.png","naturalWidth":966,"height":753},{"naturalHeight":184,"width":749,"diffbotUri":"image|3|1297360030","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624650505.png","naturalWidth":918,"height":150},{"naturalHeight":188,"width":749,"diffbotUri":"image|3|502449852","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624665606.png","naturalWidth":929,"height":151},{"naturalHeight":237,"width":749,"diffbotUri":"image|3|-2007985802","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624803507.png","naturalWidth":1053,"height":168},{"naturalHeight":604,"width":749,"diffbotUri":"image|3|-140134863","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624809508.png","naturalWidth":906,"height":499},{"naturalHeight":727,"width":749,"diffbotUri":"image|3|1129235416","url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624834309.png","naturalWidth":1063,"height":512}],"author":"Bruno Skvorc","estimatedDate":"Sun, 27 Jul 2014 00:00:00 GMT","publisherRegion":"Australia and New Zealand","icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","diffbotUri":"article|3|-1226129584","siteName":"SitePoint","type":"article","title":"Diffbot: Crawling with Visual Machine Learning","publisherCountry":"Australia","humanLanguage":"en","authorUrl":"http://www.sitepoint.com/author/bskvorc/","metaTags":[{"name":"ai"},{"name":"Artificial Intelligence"},{"name":"crawling"},{"name":"Diffbot"},{"name":"framework"},{"name":"laravel"},{"name":"machine learning"},{"name":"OOPHP"},{"name":"PHP"},{"name":"scraping"},{"name":"visual learning"}],"pageUrl":"http://www.sitepoint.com/diffbot-crawling-visual-machine-learning/","html":"<p>Have you ever wondered how social networks do URL previews so well when you share links? How do they know which images to grab, whom to cite as an author, or which tags to attach to the preview? Is it all crawling with complex regexes over source code? Actually, more often than not, it isn&rsquo;t. Meta information defined in the source can be unreliable, and sites with less than stellar reputation often use them as keyword carriers, attempting to get search engines to rank them higher. Isn&rsquo;t what we, the humans, see in front of us what matters anyway?<\/p>\n<p>If you want to build a URL preview snippet or a news aggregator, there are many automatic crawlers available online, both proprietary and open source, but you seldom find something as niche as visual machine learning. This is exactly what <a href=\"http://diffbot.com\">Diffbot<\/a> is &ndash; a &ldquo;visual learning robot&rdquo; which renders a URL you request in full and then visually extracts data, helping itself with some metadata from the page source as needed.<\/p>\n<p>After covering some theory, in this post we&rsquo;ll do a demo API call at one of SitePoint&rsquo;s posts.<\/p>\n<h2>PHP Library<\/h2>\n<p>The PHP library for Diffbot is somewhat out of date, and as such we won&rsquo;t be using it in this demo. We&rsquo;ll be performing raw API calls, and in some future posts we&rsquo;ll build our own library for API interaction.<\/p>\n<p>If you&rsquo;d like to take a look at the PHP library nonetheless, see <a href=\"https://github.com/diffbot/diffbot-php-client\">here<\/a>, and if you&rsquo;re interested in libraries for other languages, Diffbot has a <a href=\"https://diffbot.com/dev/docs/libraries/\">directory<\/a>.<\/p>\n<p><em><strong>Update, July 2015<\/strong>: A PHP library has been developed since this article was published. See its entire development process <a href=\"http://www.sitepoint.com/starting-new-php-package-right-way/\">here<\/a>, or the source code <a href=\"https://github.com/Swader/diffbot-php-client/\">here<\/a>.<\/em><\/p>\n<h2>JavaScript Content<\/h2>\n<p>We said in the introductory section that Diffbot renders the request in full and then analyzes it. But, what about JavaScript content? Nowadays, websites often render some HTML above the fold, and then finish the CSS, JS, and dynamic content loading afterwards. Can the Diffbot API see that?<\/p>\n<p>As a matter of fact, yes. Diffbot literally renders the page in full, and then inspects it visually, as explained in my StackOverflow Q&amp;A <a href=\"http://stackoverflow.com/questions/24915127/does-diffbot-execute-javascript/24915128#24915128\">here<\/a>. There are some caveats, though, so make sure you read the answer carefully.<\/p>\n<h2>Pricing and API Health<\/h2>\n<p>Diffbot has several usage tiers. There&rsquo;s a free trial tier which kills your API token after 7 days or 10000 calls, whichever comes first. The commercial tokens can be purchased at <a href=\"http://diffbot.com/pricing\">various prices<\/a>, and never expire, but do have limitations. A special case by case approach is afforded to open source and/or educational projects which provides an older model of the free token &ndash; 10k calls per month, once per second max, but never expires. You need to contact them directly if you think you qualify.<\/p>\n<p>Diffbot guarantees a high uptime, but failures sometimes do happen &ndash; especially in the most resource intensive API of the bunch: Crawlbot. Crawlbot is used to crawl entire domains, not just individual pages, and as such has a lower reliability rate than other APIs. Not by a lot, but enough to be noticeable in the <a href=\"http://status.diffbot.com/\">API Health<\/a> screen &ndash; the screen you can check to see if an API is up and running or currently unavailable if your calls run into issues or return error 500.<\/p>\n<h2>Demo<\/h2>\n<p>To prepare your environment, please boot up a <a href=\"http://www.sitepoint.com/quick-tip-get-homestead-vagrant-vm-running/\">Homestead Improved<\/a> instance.<\/p>\n<h3>Create Project<\/h3>\n<p>Create a starter Laravel project by SSHing into the VM with <code>vagrant ssh<\/code>, going into the <code>Code<\/code> folder, and executing <code>composer create-project laravel/laravel Laravel --prefer-dist<\/code>. This will let you access the Laravel greeting page via <code>http://homestead.app:8000<\/code> from the host&rsquo;s browser.<\/p>\n<h3>Add a Route and Action<\/h3>\n<p>In <code>app/routes.php<\/code> add the following route:<\/p>\n<pre><code>Route::get('/diffbot', 'HomeController@diffbotDemo');<\/code><\/pre>\n<p>In <code>app/controllers/HomeController<\/code> add the following action:<\/p>\n<pre><code>public function diffbotDemo() {\n        die(\"hi\");\n    }<\/code><\/pre>\n<p>If <code>http://homestead.app:8000/diffbot<\/code> now outputs &ldquo;hi&rdquo; on the screen, we&rsquo;re ready to start playing with the API.<\/p>\n<h3>Get a Token<\/h3>\n<p>To interact with the Diffbot API, you need a token. Sign up for one on <a href=\"http://diffbot.com/pricing/\">their pricing page<\/a>. For the sake of this demo, let&rsquo;s call our token <code>$TOKEN<\/code>, and we&rsquo;ll refer to it as such in URLs. Replace <code>$TOKEN<\/code> with your own value where appropriate.<\/p>\n<h3>Install Guzzle<\/h3>\n<p>We&rsquo;ll be using Guzzle as our HTTP client. It&rsquo;s not required, but I do recommend you get familiar with it through a <a href=\"http://www.sitepoint.com/guzzle-php-http-client/\">past article of ours<\/a>.<\/p>\n<p>Add the <code>&quot;guzzlehttp/guzzle&quot;: &quot;4.1.*@dev&quot;<\/code> to your <code>composer.json<\/code> so the require block looks like this:<\/p>\n<pre><code>\"require\": {\n\t\t\"laravel/framework\": \"4.2.*\",\n        \"guzzlehttp/guzzle\": \"4.1.*@dev\"\n\t},<\/code><\/pre>\n<p>In the project root, run <code>composer update<\/code>.<\/p>\n<h3>Fetch Article Data<\/h3>\n<p>In the first example, we&rsquo;ll crawl a SitePoint post with the default Article API from Diffbot. To do this, we refer to <a href=\"https://diffbot.com/dev/docs/\">the docs<\/a> which do an excellent job at explaining the workflow. Change the body of the <code>diffbotDemo<\/code> action to the following code:<\/p>\n<pre><code>public function diffbotDemo() {\n\n        $token = \"$TOKEN\";\n        $version = 'v3';\n\n        $client = new GuzzleHttp\\Client(['base_url' =&gt; 'http://api.diffbot.com/']);\n\n        $response = $client-&gt;get($version.'/article', ['query' =&gt; [\n            'token' =&gt; $token,\n            'url' =&gt; 'http://www.sitepoint.com/7-mistakes-commonly-made-php-developers/'\n        ]]);\n\n        die(var_dump($response-&gt;json()));\n    }<\/code><\/pre>\n<p>First, we set our token. Then, we define a variable that&rsquo;ll hold the API version. Next, it&rsquo;s up to us to create a new Guzzle client, and we also give it a base URL so we don&rsquo;t have to type it in every time we make another request.<\/p>\n<p>Next up, we create a response object by sending a GET request to the API&rsquo;s URL, and we add in an array of query parameters in key =&gt; value format. In this case, we only pass in the token and the URL, the most basic of parameters.<\/p>\n<p>Finally, since the Diffbot API returns JSON data, we use Guzzle&rsquo;s <code>json()<\/code> method to automatically decode it into an array. We then pretty-print this data:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624455201.png\"><\/img><\/figure>\n<p>As you can see, we got some information back rather quickly. There&rsquo;s the icon that was used, a preview of the text, the title, even the language, date and HTML have been returned. You&rsquo;ll notice there&rsquo;s no author, however. Let&rsquo;s change this and request some more values.<\/p>\n<p>If we add the &ldquo;fields&rdquo; parameter to the query params list and give it a value of &ldquo;tags&rdquo;, Diffbot will attempt to extract tags/categories from the URL provided. Add this line to the <code>query<\/code> array:<\/p>\n<pre><code>'fields' =&gt; 'tags'<\/code><\/pre>\n<p>and then change the <code>die<\/code> part to this:<\/p>\n<pre><code>$data = $response-&gt;json();\ndie(var_dump($data['objects'][0]['tags']));<\/code><\/pre>\n<p>Refreshing the screen now gives us this:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624487602.png\"><\/img><\/figure>\n<p>But, the source code of the article notes several other tags:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624509003.png\"><\/img><\/figure>\n<p>Why is the result so very different? It&rsquo;s precisely due to the reason we mentioned at the end of the very first paragraph of this post: what we humans see takes precedence. Diffbot is a visual learning robot, and as such its AI deducts the tags from the actual rendered content &ndash; what it can see &ndash; rather than from looking at the source code which is far too easily spiced up for SEO purposes.<\/p>\n<p>Is there a way to get the tags from the source code, though, if one really needs them? Furthermore, can we make Diffbot recognize the author on SitePoint articles? Yes. With the Custom API.<\/p>\n<h3>Meta Tags and Author with Custom API<\/h3>\n<p>The Custom API is a feature which allows you to not only tweak existing Diffbot API to your liking by adding new fields and rules for content extraction, but also allows you to create completely new APIs (accessed via a dedicated URL, too) for custom content processing.<\/p>\n<p>Go to the <a href=\"http://diffbot.com/dev\">dev dashboard<\/a> and log in with your token. Then, go into &ldquo;Custom API&rdquo;. Activate the &ldquo;Create a Rule&rdquo; tab at the bottom, and input the URL of the article we&rsquo;re crawling into the URL box, then click Test. Your screen should look something like this:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624552704.png\"><\/img><\/figure>\n<p>You&rsquo;ll immediately notice the Author field is empty. You can tweak the author-searching rule by clicking Edit next to it, and finding the Author element in the live preview window that opens, then click on it to get the desired result. However, due to some, well, less than perfect CSS on SitePoint&rsquo;s end, it&rsquo;s very difficult to provide Diffbot&rsquo;s API with a consistent path to the author name, especially by clicking on elements. Instead, add the following rule manually: <code>.contributor--large .contributor_name a<\/code> and click Save.<\/p>\n<p>You&rsquo;ll notice the Preview window now correctly populates the Author field:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624650505.png\"><\/img><\/figure>\n<p>In fact, this new rule is automatically applied to all SitePoint links for your token. If you try to preview another SitePoint article, like <a href=\"http://www.sitepoint.com/social-network-authentication-twitter-facebook/\">this one<\/a>, you&rsquo;ll notice Peter Nijssen is successfully extracted:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624665606.png\"><\/img><\/figure>\n<p>Ok, let&rsquo;s modify the API further. We need the <code>article:tag<\/code> values that are visible in source code. Doing this requires a two-step process.<\/p>\n<p>A collection is exactly what it sounds like &ndash; a collection of values grabbed via a specific ruleset. We&rsquo;ll call our collection &ldquo;MetaTags&rdquo;, and give it the following selector: <code>meta[property=article:tag]<\/code>. This means &ldquo;find all meta elements in the HTML that have the <code>property<\/code> attribute with the value <code>article:tag<\/code>&ldquo;.<\/p>\n<p>Collection fields are individual entries in a collection &ndash; in our case, the various tags. Click on &ldquo;Add a custom field to this collection&rdquo;, and add the following values:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624803507.png\"><\/img><\/figure>\n<p>Click Save. You&rsquo;ll immediately have access to the list of Tags in the result window:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624809508.png\"><\/img><\/figure>\n<p>Change the final output of the <code>diffbotDemo()<\/code> action to this:<\/p>\n<pre><code>die(var_dump($data['objects'][0]['metaTags']));<\/code><\/pre>\n<p>If you now refresh the URL we tested with (<code>http://homestead.app:8000/diffbot<\/code>), you&rsquo;ll notice the author and meta tags values are there. Here&rsquo;s the output the above line of code produces:<\/p>\n<figure><img alt=\"\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2014/07/140624834309.png\"><\/img><\/figure>\n<p>We have our tags!<\/p>\n<h2>Conclusion<\/h2>\n<p>Diffbot is a powerful data extractor for the web &ndash; whether you need to consolidate many sites into a single search index without combining their back-ends, want to build a news aggregator, have an idea for a URL preview web component, or want to regularly harvest the contents of competitors&rsquo; public pricing lists, Diffbot can help. With dead simple API calls and highly structured responses, you&rsquo;ll be up and running in next to no time. In a later article, we&rsquo;ll build a brand new API for using Diffbot with PHP, and redo the calls above with it. We&rsquo;ll also host the library on Packagist, so you can easily install it with Composer. Stay tuned!<\/p>","text":"Have you ever wondered how social networks do URL previews so well when you share links? How do they know which images to grab, whom to cite as an author, or which tags to attach to the preview? Is it all crawling with complex regexes over source code? Actually, more often than not, it isn\u2019t. Meta information defined in the source can be unreliable, and sites with less than stellar reputation often use them as keyword carriers, attempting to get search engines to rank them higher. Isn\u2019t what we, the humans, see in front of us what matters anyway?\nIf you want to build a URL preview snippet or a news aggregator, there are many automatic crawlers available online, both proprietary and open source, but you seldom find something as niche as visual machine learning. This is exactly what Diffbot is \u2013 a \u201cvisual learning robot\u201d which renders a URL you request in full and then visually extracts data, helping itself with some metadata from the page source as needed.\nAfter covering some theory, in this post we\u2019ll do a demo API call at one of SitePoint\u2019s posts.\nPHP Library\nThe PHP library for Diffbot is somewhat out of date, and as such we won\u2019t be using it in this demo. We\u2019ll be performing raw API calls, and in some future posts we\u2019ll build our own library for API interaction.\nIf you\u2019d like to take a look at the PHP library nonetheless, see here, and if you\u2019re interested in libraries for other languages, Diffbot has a directory.\nUpdate, July 2015: A PHP library has been developed since this article was published. See its entire development process here, or the source code here.\nJavaScript Content\nWe said in the introductory section that Diffbot renders the request in full and then analyzes it. But, what about JavaScript content? Nowadays, websites often render some HTML above the fold, and then finish the CSS, JS, and dynamic content loading afterwards. Can the Diffbot API see that?\nAs a matter of fact, yes. Diffbot literally renders the page in full, and then inspects it visually, as explained in my StackOverflow Q&A here. There are some caveats, though, so make sure you read the answer carefully.\nPricing and API Health\nDiffbot has several usage tiers. There\u2019s a free trial tier which kills your API token after 7 days or 10000 calls, whichever comes first. The commercial tokens can be purchased at various prices, and never expire, but do have limitations. A special case by case approach is afforded to open source and/or educational projects which provides an older model of the free token \u2013 10k calls per month, once per second max, but never expires. You need to contact them directly if you think you qualify.\nDiffbot guarantees a high uptime, but failures sometimes do happen \u2013 especially in the most resource intensive API of the bunch: Crawlbot. Crawlbot is used to crawl entire domains, not just individual pages, and as such has a lower reliability rate than other APIs. Not by a lot, but enough to be noticeable in the API Health screen \u2013 the screen you can check to see if an API is up and running or currently unavailable if your calls run into issues or return error 500.\nDemo\nTo prepare your environment, please boot up a Homestead Improved instance.\nCreate Project\nCreate a starter Laravel project by SSHing into the VM with vagrant ssh, going into the Code folder, and executing composer create-project laravel/laravel Laravel --prefer-dist. This will let you access the Laravel greeting page via http://homestead.app:8000 from the host\u2019s browser.\nAdd a Route and Action\nIn app/routes.php add the following route:\nRoute::get('/diffbot', 'HomeController@diffbotDemo');\nIn app/controllers/HomeController add the following action:\npublic function diffbotDemo() {\n        die(\"hi\");\n    }\nIf http://homestead.app:8000/diffbot now outputs \u201chi\u201d on the screen, we\u2019re ready to start playing with the API.\nGet a Token\nTo interact with the Diffbot API, you need a token. Sign up for one on their pricing page. For the sake of this demo, let\u2019s call our token $TOKEN, and we\u2019ll refer to it as such in URLs. Replace $TOKEN with your own value where appropriate.\nInstall Guzzle\nWe\u2019ll be using Guzzle as our HTTP client. It\u2019s not required, but I do recommend you get familiar with it through a past article of ours.\nAdd the \"guzzlehttp/guzzle\": \"4.1.*@dev\" to your composer.json so the require block looks like this:\n\"require\": {\n\t\t\"laravel/framework\": \"4.2.*\",\n        \"guzzlehttp/guzzle\": \"4.1.*@dev\"\n\t},\nIn the project root, run composer update.\nFetch Article Data\nIn the first example, we\u2019ll crawl a SitePoint post with the default Article API from Diffbot. To do this, we refer to the docs which do an excellent job at explaining the workflow. Change the body of the diffbotDemo action to the following code:\npublic function diffbotDemo() {\n\n        $token = \"$TOKEN\";\n        $version = 'v3';\n\n        $client = new GuzzleHttp\\Client(['base_url' => 'http://api.diffbot.com/']);\n\n        $response = $client->get($version.'/article', ['query' => [\n            'token' => $token,\n            'url' => 'http://www.sitepoint.com/7-mistakes-commonly-made-php-developers/'\n        ]]);\n\n        die(var_dump($response->json()));\n    }\nFirst, we set our token. Then, we define a variable that\u2019ll hold the API version. Next, it\u2019s up to us to create a new Guzzle client, and we also give it a base URL so we don\u2019t have to type it in every time we make another request.\nNext up, we create a response object by sending a GET request to the API\u2019s URL, and we add in an array of query parameters in key => value format. In this case, we only pass in the token and the URL, the most basic of parameters.\nFinally, since the Diffbot API returns JSON data, we use Guzzle\u2019s json() method to automatically decode it into an array. We then pretty-print this data:\nAs you can see, we got some information back rather quickly. There\u2019s the icon that was used, a preview of the text, the title, even the language, date and HTML have been returned. You\u2019ll notice there\u2019s no author, however. Let\u2019s change this and request some more values.\nIf we add the \u201cfields\u201d parameter to the query params list and give it a value of \u201ctags\u201d, Diffbot will attempt to extract tags/categories from the URL provided. Add this line to the query array:\n'fields' => 'tags'\nand then change the die part to this:\n$data = $response->json();\ndie(var_dump($data['objects'][0]['tags']));\nRefreshing the screen now gives us this:\nBut, the source code of the article notes several other tags:\nWhy is the result so very different? It\u2019s precisely due to the reason we mentioned at the end of the very first paragraph of this post: what we humans see takes precedence. Diffbot is a visual learning robot, and as such its AI deducts the tags from the actual rendered content \u2013 what it can see \u2013 rather than from looking at the source code which is far too easily spiced up for SEO purposes.\nIs there a way to get the tags from the source code, though, if one really needs them? Furthermore, can we make Diffbot recognize the author on SitePoint articles? Yes. With the Custom API.\nMeta Tags and Author with Custom API\nThe Custom API is a feature which allows you to not only tweak existing Diffbot API to your liking by adding new fields and rules for content extraction, but also allows you to create completely new APIs (accessed via a dedicated URL, too) for custom content processing.\nGo to the dev dashboard and log in with your token. Then, go into \u201cCustom API\u201d. Activate the \u201cCreate a Rule\u201d tab at the bottom, and input the URL of the article we\u2019re crawling into the URL box, then click Test. Your screen should look something like this:\nYou\u2019ll immediately notice the Author field is empty. You can tweak the author-searching rule by clicking Edit next to it, and finding the Author element in the live preview window that opens, then click on it to get the desired result. However, due to some, well, less than perfect CSS on SitePoint\u2019s end, it\u2019s very difficult to provide Diffbot\u2019s API with a consistent path to the author name, especially by clicking on elements. Instead, add the following rule manually: .contributor--large .contributor_name a and click Save.\nYou\u2019ll notice the Preview window now correctly populates the Author field:\nIn fact, this new rule is automatically applied to all SitePoint links for your token. If you try to preview another SitePoint article, like this one, you\u2019ll notice Peter Nijssen is successfully extracted:\nOk, let\u2019s modify the API further. We need the article:tag values that are visible in source code. Doing this requires a two-step process.\nA collection is exactly what it sounds like \u2013 a collection of values grabbed via a specific ruleset. We\u2019ll call our collection \u201cMetaTags\u201d, and give it the following selector: meta[property=article:tag]. This means \u201cfind all meta elements in the HTML that have the property attribute with the value article:tag\u201c.\nCollection fields are individual entries in a collection \u2013 in our case, the various tags. Click on \u201cAdd a custom field to this collection\u201d, and add the following values:\nClick Save. You\u2019ll immediately have access to the list of Tags in the result window:\nChange the final output of the diffbotDemo() action to this:\ndie(var_dump($data['objects'][0]['metaTags']));\nIf you now refresh the URL we tested with (http://homestead.app:8000/diffbot), you\u2019ll notice the author and meta tags values are there. Here\u2019s the output the above line of code produces:\nWe have our tags!\nConclusion\nDiffbot is a powerful data extractor for the web \u2013 whether you need to consolidate many sites into a single search index without combining their back-ends, want to build a news aggregator, have an idea for a URL preview web component, or want to regularly harvest the contents of competitors\u2019 public pricing lists, Diffbot can help. With dead simple API calls and highly structured responses, you\u2019ll be up and running in next to no time. In a later article, we\u2019ll build a brand new API for using Diffbot with PHP, and redo the calls above with it. We\u2019ll also host the library on Packagist, so you can easily install it with Composer. Stay tuned!"}]}