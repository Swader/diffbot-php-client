HTTP/1.1 200 OK
Server: nginx/1.6.3
Date: Sat, 06 Jun 2015 16:42:36 GMT
Content-Type: application/json;charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Vary: Accept-Encoding
Access-Control-Allow-Origin: *

{"request":{"num":20,"col":null,"start":0,"token":"xxxxxxxxxx","query":"author:\"Miles Johnson\" AND type:article"},
"currentTimeUTC":1433609003,
"responseTimeMS":112,
"numResultsOmitted":0,
"numShardsSkipped":0,
"totalShards":32,
"docsInCollection":94592,
"hits":8,
"queryInfo":{
"fullQuery":"type:json AND (author:\"Miles Johnson\" AND type:article)",
"queryLanguageAbbr":"xx",
"queryLanguage":"Unknown",
"terms":[
{
"termNum":0,
"termStr":"Miles Johnson",
"termFreq":359328,
"termHash48":224575481707228,
"termHash64":4150001371756911641,
"prefixHash64":3732660069076179349
},
{
"termNum":1,
"termStr":"type:json",
"termFreq":524352,
"termHash48":272064464231140,
"termHash64":9877301297136722857,
"prefixHash64":7586288672657224048
},
{
"termNum":2,
"termStr":"type:article",
"termFreq":524448,
"termHash48":210861560163398,
"termHash64":12449358332005671483,
"prefixHash64":7586288672657224048
}
]
},
"objects":[
{"tags":[{"id":185108,"count":3,"prevalence":1.5,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":2468048,"count":2,"prevalence":1,"label":"WordPress","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/WordPress"},{"id":885421,"count":1,"prevalence":0.5,"label":"HTML5","uri":"http://dbpedia.org/resource/HTML5"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","text":"is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology \u2014 HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre\nname this time, so I called it simply \"Devise Demo\": $ rails new DeviseDemo -T Rails 4.2.0 is used, but Devise is compatible with Rails 3 as well. Drop in some gems: Gemfile gem 'devise', '3.4.1' gem 'bootstrap-sass' bootstrap-sass is not relevant to the tutorial, but I\nMarch 26, 2015\n. A kissing cousin of JSFiddle is Codepen.io. It has many of the same features including Sass and Less support, but you have to add external libraries like jQuery via URLs rather than simple checkboxes. Codepen updates the live preview as you type, but JSFiddle requires you to click the \u201cRun\u201d button\nMarch 25, 2015\nthat you handle your CSS with SASS. If you're not familiar with these scripts and methods, this may be a little advanced for you. JointsWP JointsWP is a blank WordPress theme built from a combination of Foundation and WordPress. What I like about this boilerplate is that it makes it easier\nMarch 11, 2015\n\n \"2015 is the year everyone will move away from frameworks.\" I don\u2019t really know about that. I just wanted to link bait all of you. Jokes aside, have you noticed the subtle movement in the front-end scene where everyone is moving away from frameworks? For example, Susy, the Sass grid","pageUrl":"http://www.sitepoint.com/search/sass/page/7/","metaTags":[],"humanLanguage":"en","type":"article","date":"Tue, 24 Mar 2015 00:00:00 GMT","author":"Miles Johnson","title":"Toolkit: A Front-End Framework for the Modern Web","diffbotUri":"article|3|1990642558","nextPages":["http://www.sitepoint.com/search/sass/page/7/?s=sass&type=post&paged=8"],"images":[{"diffbotUri":"image|3|761444823","naturalHeight":710,"primary":true,"naturalWidth":710,"url":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/icon.sitepoint.png"}],"html":"<li>    is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology &mdash; HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre   <\/li>\n<li>    name this time, so I called it simply &quot;Devise Demo&quot;: $ rails new DeviseDemo -T Rails 4.2.0 is used, but Devise is compatible with Rails 3 as well. Drop in some gems: Gemfile gem 'devise', '3.4.1' gem 'bootstrap-sass' bootstrap-sass is not relevant to the tutorial, but I  <p>March 26, 2015<\/p>    <\/li>\n<li>   . A kissing cousin of JSFiddle is Codepen.io. It has many of the same features including Sass and Less support, but you have to add external libraries like jQuery via URLs rather than simple checkboxes. Codepen updates the live preview as you type, but JSFiddle requires you to click the &ldquo;Run&rdquo; button  <p>March 25, 2015<\/p>    <\/li>\n<li>    that you handle your CSS with SASS. If you're not familiar with these scripts and methods, this may be a little advanced for you. JointsWP JointsWP is a blank WordPress theme built from a combination of Foundation and WordPress. What I like about this boilerplate is that it makes it easier  <p>March 11, 2015<\/p>    <\/li><br class=\"diffbot_nextPage\"> <p>&quot;2015 is the year everyone will move away from frameworks.&quot; I don&rsquo;t really know about that. I just wanted to link bait all of you. Jokes aside, have you noticed the subtle movement in the front-end scene where everyone is moving away from frameworks? For example, Susy, the Sass grid<\/p>","numPages":2,"docId":79272968141,"gburl":"http://www.sitepoint.com/search/sass/page/7/-diffbotxyz3863447284","lastCrawlTimeUTC":1432108850,"timestamp":"Wed, 20 May 2015 08:00:50 GMT"}
,
{"tags":[{"id":185108,"count":3,"prevalence":1.5,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":2468048,"count":2,"prevalence":1,"label":"WordPress","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/WordPress"},{"id":885421,"count":1,"prevalence":0.5,"label":"HTML5","uri":"http://dbpedia.org/resource/HTML5"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","text":"is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology \u2014 HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre\nname this time, so I called it simply \"Devise Demo\": $ rails new DeviseDemo -T Rails 4.2.0 is used, but Devise is compatible with Rails 3 as well. Drop in some gems: Gemfile gem 'devise', '3.4.1' gem 'bootstrap-sass' bootstrap-sass is not relevant to the tutorial, but I\nMarch 26, 2015\n. A kissing cousin of JSFiddle is Codepen.io. It has many of the same features including Sass and Less support, but you have to add external libraries like jQuery via URLs rather than simple checkboxes. Codepen updates the live preview as you type, but JSFiddle requires you to click the \u201cRun\u201d button\nMarch 25, 2015\nthat you handle your CSS with SASS. If you're not familiar with these scripts and methods, this may be a little advanced for you. JointsWP JointsWP is a blank WordPress theme built from a combination of Foundation and WordPress. What I like about this boilerplate is that it makes it easier\nMarch 11, 2015\n\n \"2015 is the year everyone will move away from frameworks.\" I don\u2019t really know about that. I just wanted to link bait all of you. Jokes aside, have you noticed the subtle movement in the front-end scene where everyone is moving away from frameworks? For example, Susy, the Sass grid\n\n. Lobotomized owls Getting deeper with CSS this week, we've been exploring axiomatic CSS and the Lobotomized Owl selector, * + *. Sass has also been covered, with scaling values across breakpoints using Sass, and the self-aware Sass mixin, and we now have a unit tester for Sass, which is going to get\n\n\nfree to use any of the functionality provided by Codepen including Sass, Prefixfree. Backward browser compatibility will be appreciated but is not central to our criteria Present your solutions as CodePen links posted to the comments below. You've got a week to submit your best ideas\nSass yet (shame on you! :). Maybe you want to become more familiar with a back-end technology, to complement your front-end stack. Or maybe it's a new JavaScript library or framework. Whatever it is, I\u2019d like to hear about it. But I\u2019ll go first. What I\u2019ve Neglected Here\u2019s a short list of some\nAugust 4, 2014\n, but the style is lacking. Let's add some nice style using Zurb Foundation. Step 2: Responsive Design with Foundation Foundation is a front-end framework similar to Twitter Bootstrap, it's built on SASS instead of LESS which can make it easier to integrate it into your Rails application\nAugust 1, 2014\nfor a Firefox-only audience. Too Little Too Late? Native CSS variables would have revolutionized our working lives had they been implemented a decade ago. Today, if you want to use variables in your stylesheets, you probably already are. Preprocessors such as Sass, Less, and Stylus provide variable\nJuly 25, 2014\n-organized file right away. It also makes it pretty simple to break this file down into several partials if you'd like to use Sass or another CSS pre-processor to maintain your CSS for your custom theme (that's what I'd do). Or if you prefer, there are some Sass-ready forks of _s available on Github\nJuly 24, 2014\n\n from a Fontello config.json file. SourceDemo 9. Slidebars A jQuery plugin for quickly and easily implementing app-style revealing, overlay and push menus and sidebars into your website. Source + Demo 10. Ridiculously Responsive Social Sharing Buttons RRSSB is built with SASS, so you can easily\n\n instead: gem 'rails', github: 'rails/rails' gem 'rails', '4.0.0' # Use sqlite3 as the database for Active Record gem 'sqlite3' # Use SCSS for stylesheets gem 'sass-rails', '~> 4.0.0' # Use Uglifier as compressor for JavaScript assets gem 'uglifier', '>= 1.3.0' # Use CoffeeScript\n\n\nBack in November I discussed various options for integrating Twitter Bootstrap into a Rails 3.1 app, including using the less-rails-bootstrap and bootstrap-sass gems. Then last month I wrote a follow up tutorial showing how to quickly create a working web site using Twitter Bootstrap\nPart 3 - Database Associations After those three parts, we have now finished most of the main functionality of our To Do List app. In this final part we are going to look at using Sass for the CSS before deploying the app on the Heroku cloud hosting service. A Logo Every self respecting app needs\nSeptember 16, 2011\n\n engines, like ERB and Haml. Sprockets Sprockets is new at Rails 3.1, providing the new asset packaging pipeline for javascript and coffeescript, as well as SASS and CSS. TZInfo TZInfo is a timezone library for Ruby. Well, this post is reaching the point where it can't be read on the train or waiting\n\n. Semantic Grid System\u2014a simple and easy to use page layout tool. It supports Fixed, Fluid, and Responsive layouts. And, by the way, you can use it with Sass and Stylus too (if you still haven't fallen in love with LESS). Centage\u2014if you need full fluidity and flexibility, you should","pageUrl":"http://www.sitepoint.com/?s=sass&type=post&paged=7","metaTags":[],"humanLanguage":"en","type":"article","date":"Tue, 24 Mar 2015 00:00:00 GMT","author":"Miles Johnson","title":"Toolkit: A Front-End Framework for the Modern Web","diffbotUri":"article|3|1094100739","nextPages":["http://www.sitepoint.com/?s=sass&type=post&paged=8","http://www.sitepoint.com/?s=sass&type=post&paged=9","http://www.sitepoint.com/?s=sass&type=post&paged=10","http://www.sitepoint.com/?s=sass&type=post&paged=11","http://www.sitepoint.com/?s=sass&type=post&paged=12","http://www.sitepoint.com/?s=sass&type=post&paged=13","http://www.sitepoint.com/?s=sass&type=post&paged=14","http://www.sitepoint.com/?s=sass&type=post&paged=15"],"images":[{"diffbotUri":"image|3|761444823","naturalHeight":710,"primary":true,"naturalWidth":710,"url":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/icon.sitepoint.png"}],"html":"<li>    is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology &mdash; HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre   <\/li>\n<li>    name this time, so I called it simply &quot;Devise Demo&quot;: $ rails new DeviseDemo -T Rails 4.2.0 is used, but Devise is compatible with Rails 3 as well. Drop in some gems: Gemfile gem 'devise', '3.4.1' gem 'bootstrap-sass' bootstrap-sass is not relevant to the tutorial, but I  <p>March 26, 2015<\/p>    <\/li>\n<li>   . A kissing cousin of JSFiddle is Codepen.io. It has many of the same features including Sass and Less support, but you have to add external libraries like jQuery via URLs rather than simple checkboxes. Codepen updates the live preview as you type, but JSFiddle requires you to click the &ldquo;Run&rdquo; button  <p>March 25, 2015<\/p>    <\/li>\n<li>    that you handle your CSS with SASS. If you're not familiar with these scripts and methods, this may be a little advanced for you. JointsWP JointsWP is a blank WordPress theme built from a combination of Foundation and WordPress. What I like about this boilerplate is that it makes it easier  <p>March 11, 2015<\/p>    <\/li><br class=\"diffbot_nextPage\"> <p>&quot;2015 is the year everyone will move away from frameworks.&quot; I don&rsquo;t really know about that. I just wanted to link bait all of you. Jokes aside, have you noticed the subtle movement in the front-end scene where everyone is moving away from frameworks? For example, Susy, the Sass grid<\/p><br class=\"diffbot_nextPage\"> <p>. Lobotomized owls Getting deeper with CSS this week, we've been exploring axiomatic CSS and the Lobotomized Owl selector, * + *. Sass has also been covered, with scaling values across breakpoints using Sass, and the self-aware Sass mixin, and we now have a unit tester for Sass, which is going to get<\/p><br class=\"diffbot_nextPage\"> <li>    free to use any of the functionality provided by Codepen including Sass, Prefixfree. Backward browser compatibility will be appreciated but is not central to our criteria Present your solutions as CodePen links posted to the comments below. You've got a week to submit your best ideas   <\/li>\n<li>    Sass yet (shame on you! :). Maybe you want to become more familiar with a back-end technology, to complement your front-end stack. Or maybe it's a new JavaScript library or framework. Whatever it is, I&rsquo;d like to hear about it. But I&rsquo;ll go first. What I&rsquo;ve Neglected Here&rsquo;s a short list of some  <p>August 4, 2014<\/p>    <\/li>\n<li>   , but the style is lacking. Let's add some nice style using Zurb Foundation. Step 2: Responsive Design with Foundation Foundation is a front-end framework similar to Twitter Bootstrap, it's built on SASS instead of LESS which can make it easier to integrate it into your Rails application  <p>August 1, 2014<\/p>    <\/li>\n<li>    for a Firefox-only audience. Too Little Too Late? Native CSS variables would have revolutionized our working lives had they been implemented a decade ago. Today, if you want to use variables in your stylesheets, you probably already are. Preprocessors such as Sass, Less, and Stylus provide variable  <p>July 25, 2014<\/p>    <\/li>\n<li>   -organized file right away. It also makes it pretty simple to break this file down into several partials if you'd like to use Sass or another CSS pre-processor to maintain your CSS for your custom theme (that's what I'd do). Or if you prefer, there are some Sass-ready forks of _s available on Github  <p>July 24, 2014<\/p>    <\/li><br class=\"diffbot_nextPage\"> <p>from a Fontello config.json file. SourceDemo 9. Slidebars A jQuery plugin for quickly and easily implementing app-style revealing, overlay and push menus and sidebars into your website. Source + Demo 10. Ridiculously Responsive Social Sharing Buttons RRSSB is built with SASS, so you can easily<\/p><br class=\"diffbot_nextPage\"> <p>instead: gem 'rails', github: 'rails/rails' gem 'rails', '4.0.0' # Use sqlite3 as the database for Active Record gem 'sqlite3' # Use SCSS for stylesheets gem 'sass-rails', '~&gt; 4.0.0' # Use Uglifier as compressor for JavaScript assets gem 'uglifier', '&gt;= 1.3.0' # Use CoffeeScript<\/p><br class=\"diffbot_nextPage\"> <ol> <li>    Back in November I discussed various options for integrating Twitter Bootstrap into a Rails 3.1 app, including using the less-rails-bootstrap and bootstrap-sass gems. Then last month I wrote a follow up tutorial showing how to quickly create a working web site using Twitter Bootstrap   <\/li> <li>    Part 3 - Database Associations After those three parts, we have now finished most of the main functionality of our To Do List app. In this final part we are going to look at using Sass for the CSS before deploying the app on the Heroku cloud hosting service. A Logo Every self respecting app needs  <p>September 16, 2011<\/p>    <\/li> <\/ol><br class=\"diffbot_nextPage\"> <p>engines, like ERB and Haml. Sprockets Sprockets is new at Rails 3.1, providing the new asset packaging pipeline for javascript and coffeescript, as well as SASS and CSS. TZInfo TZInfo is a timezone library for Ruby. Well, this post is reaching the point where it can't be read on the train or waiting<\/p><br class=\"diffbot_nextPage\"> <p>. Semantic Grid System&mdash;a simple and easy to use page layout tool. It supports Fixed, Fluid, and Responsive layouts. And, by the way, you can use it with Sass and Stylus too (if you still haven't fallen in love with LESS). Centage&mdash;if you need full fluidity and flexibility, you should<\/p>","numPages":9,"docId":148713717736,"gburl":"http://www.sitepoint.com/?s=sass&type=post&paged=7-diffbotxyz3863447284","lastCrawlTimeUTC":1432105732,"timestamp":"Wed, 20 May 2015 07:08:52 GMT"}
,
{"tags":[{"id":185108,"count":2,"prevalence":0.75,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":1678494,"count":1,"prevalence":0.375,"label":"ECMAScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/ECMAScript"},{"id":915685,"count":1,"prevalence":0.375,"label":"JavaScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/JavaScript"},{"id":5232974,"count":1,"prevalence":0.375,"label":"HipHop Virtual Machine","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/HipHop_Virtual_Machine"},{"id":80318,"count":1,"prevalence":0.375,"label":"HTML","uri":"http://dbpedia.org/resource/HTML"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","author":"Miles Johnson","text":"Miles is a full-stack web developer who loves to dabble in PHP, Hack, JavaScript, CSS, and HTML, among a handful of other technologies. As the lead developer behind the Titon Project, his primary focus is a fully featured back-end Hack Framework that runs on HHVM, and an ES6 and CSS3 based front-end user interface Toolkit.","title":"Miles Johnson","diffbotUri":"article|3|2048407968","pageUrl":"http://www.sitepoint.com/author/mjohnson/","metaTags":[],"images":[{"diffbotUri":"image|3|761444823","naturalHeight":710,"primary":true,"naturalWidth":710,"url":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/icon.sitepoint.png"}],"humanLanguage":"en","html":"<p>Miles is a full-stack web developer who loves to dabble in PHP, Hack, JavaScript, CSS, and HTML, among a handful of other technologies. As the lead developer behind the Titon Project, his primary focus is a fully featured back-end Hack Framework that runs on HHVM, and an ES6 and CSS3 based front-end user interface Toolkit.<\/p>","date":"Tue, 24 Mar 2015 00:00:00 GMT","type":"article","docId":169820131,"gburl":"http://www.sitepoint.com/author/mjohnson/-diffbotxyz705685266","lastCrawlTimeUTC":1432072119,"timestamp":"Tue, 19 May 2015 21:48:39 GMT"}
,
{"tags":[{"id":185108,"count":2,"prevalence":0.75,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":1678494,"count":1,"prevalence":0.375,"label":"ECMAScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/ECMAScript"},{"id":915685,"count":1,"prevalence":0.375,"label":"JavaScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/JavaScript"},{"id":5232974,"count":1,"prevalence":0.375,"label":"HipHop Virtual Machine","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/HipHop_Virtual_Machine"},{"id":80318,"count":1,"prevalence":0.375,"label":"HTML","uri":"http://dbpedia.org/resource/HTML"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","author":"Miles Johnson","text":"Miles is a full-stack web developer who loves to dabble in PHP, Hack, JavaScript, CSS, and HTML, among a handful of other technologies. As the lead developer behind the Titon Project, his primary focus is a fully featured back-end Hack Framework that runs on HHVM, and an ES6 and CSS3 based front-end user interface Toolkit.","title":"Miles Johnson","diffbotUri":"article|3|2048407968","pageUrl":"http://www.sitepoint.com/author/mjohnson/","metaTags":[],"images":[{"diffbotUri":"image|3|761444823","naturalHeight":710,"primary":true,"naturalWidth":710,"url":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/icon.sitepoint.png"}],"humanLanguage":"en","html":"<p>Miles is a full-stack web developer who loves to dabble in PHP, Hack, JavaScript, CSS, and HTML, among a handful of other technologies. As the lead developer behind the Titon Project, his primary focus is a fully featured back-end Hack Framework that runs on HHVM, and an ES6 and CSS3 based front-end user interface Toolkit.<\/p>","date":"Tue, 24 Mar 2015 00:00:00 GMT","type":"article","docId":169820131,"gburl":"http://www.sitepoint.com/author/mjohnson/-diffbotxyz705685266","lastCrawlTimeUTC":1432161978,"timestamp":"Wed, 20 May 2015 22:46:18 GMT"}
,
{"tags":[{"id":915685,"count":11,"prevalence":1.064516129032258,"label":"JavaScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/JavaScript"},{"id":185108,"count":10,"prevalence":0.967741935483871,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":80318,"count":4,"prevalence":0.3870967741935484,"label":"HTML","uri":"http://dbpedia.org/resource/HTML"},{"id":885421,"count":1,"prevalence":0.0967741935483871,"label":"HTML5","uri":"http://dbpedia.org/resource/HTML5"},{"id":1053273,"count":1,"prevalence":0.0967741935483871,"label":"MooTools","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/MooTools"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","author":"Miles Johnson","text":"Titon Toolkit, or simply Toolkit, is a project that I\u2019ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of \u201cCSS/JavaScript frameworks\u201d was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.\nSo, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology \u2014 HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.\nThe core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.\nSo, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: Toolkit was built to be extremely extensible, easily customizable, and efficiently architected.\nLet\u2019s look at some of its unique features.\nDecoupled JavaScript, CSS, and HTML\nA running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes \u2014 all of which are used for element traversal, look-up, and event binding.\nThe following example uses Toolkit\u2019s carousel component as a proof of concept.\nWith decoupling in place, custom HTML is now possible, which isn\u2019t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via data-* attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.\nEasier CSS Styling\nTired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly \u2014 mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.\nFurthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit\u2019s Sass files to be imported into scope and compiled directly in your own Sass files.\nCustomizable CSS Class Names\nAnother pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.\nThe first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.\nThe second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.\nDo note, however, that namespaces are not applied to state, animation, or behavioral class names.\nExtensible JavaScript\nThe entire JavaScript layer in Toolkit is built around a flexible inheritance based object-oriented class system. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.\nOn top of this, each class supports a set of options for customizability. These options can be set globally, through the constructor, or as data attributes. Option groups and even responsive options are built into the core.\nFlexbox Support\nAlthough experimental, Toolkit offers built-in flexbox support through the Flex component. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.\nFeature Packed\nBesides the highlights already mentioned, Toolkit supports an array of features that include:\nIf you\u2019d like to test out some of Toolkit\u2019s components, you can visit this interactive demo page.\nDown the Pipeline\nThe JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, some of which have already started development.\nTarget evergreen browsers and their previous 3 releases.\nRemove jQuery as a dependency and polyfill any functionality not present.\nRewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.\nIntegrate Babel for ES6 -> ES5 compilation.\nIntegrate template rendering instead of DOM manipulation.\nLook into using webpack as the bundler and build tool.\nAdd Less support by integrating a Sass to Less transpiler.\nRewrite components using a flux-based uni-directional data flow system\nThere\u2019s also some discussion about integrating with external frameworks, but this is currently under RFC.\nPolyfill integration for missing browser features\nCustom web components through Polymer or another service\nReact and Toolkit component integration\nWhy not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I\u2019m always looking for new team members and contributors, so if you\u2019re interested, come chat in #titon on freenode.net.\nIn Closing\nIt\u2019s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you\u2019re looking for any more information on Toolkit, I suggest visiting the official website, our Twitter account, or the GitHub repo. Cheers!","title":"Toolkit: A Front-End Framework for the Modern Web","diffbotUri":"article|3|-839743441","pageUrl":"http://www.sitepoint.com/?p=101740","metaTags":[{"name":"css framework"},{"name":"css toolkit"},{"name":"frontend framework"},{"name":"LouisL"}],"images":[{"title":"Titon Toolkit website","height":487,"diffbotUri":"image|3|-166182215","naturalHeight":500,"width":780,"primary":true,"naturalWidth":800,"url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png"}],"humanLanguage":"en","html":"<p><a href=\"http://titon.io/en/toolkit\">Titon Toolkit<\/a>, or simply Toolkit, is a project that I&rsquo;ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of &ldquo;CSS/JavaScript frameworks&rdquo; was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.<\/p>\n<p>So, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology &mdash; HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.<\/p>\n<figure><a href=\"http://titon.io/en/toolkit\"><img alt=\"Titon Toolkit website\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png\"><\/img><\/a><figcaption><a href=\"http://titon.io/en/toolkit\">Titon Toolkit website<\/a><\/figcaption><\/figure>\n<p>The core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.<\/p>\n<p>So, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: <strong>Toolkit was built to be extremely extensible, easily customizable, and efficiently architected<\/strong>.<\/p>\n<p>Let&rsquo;s look at some of its unique features.<\/p>\n<h2>Decoupled JavaScript, CSS, and HTML<\/h2>\n<p>A running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes &mdash; all of which are used for element traversal, look-up, and event binding.<\/p>\n<p>The following example uses <a href=\"http://titon.io/en/toolkit/2.1.0/components/carousel\">Toolkit&rsquo;s carousel component<\/a> as a proof of concept.<\/p>\n<p>With decoupling in place, custom HTML is now possible, which isn&rsquo;t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via <code>data-*<\/code> attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.<\/p>\n<h2>Easier CSS Styling<\/h2>\n<p>Tired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly &mdash; mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.<\/p>\n<p>Furthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit&rsquo;s Sass files to be imported into scope and compiled directly in your own Sass files.<\/p>\n<h2>Customizable CSS Class Names<\/h2>\n<p>Another pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.<\/p>\n<p>The first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.<\/p>\n<p>The second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.<\/p>\n<p>Do note, however, that namespaces are not applied to state, animation, or behavioral class names.<\/p>\n<h2>Extensible JavaScript<\/h2>\n<p>The entire JavaScript layer in Toolkit is built around a flexible inheritance based <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/class\">object-oriented class system<\/a>. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.<\/p>\n<p>On top of this, each class supports a set of <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/base#options\">options for customizability<\/a>. These options can be set globally, through the constructor, <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/component#options\">or as data attributes<\/a>. Option groups and even responsive options are built into the core.<\/p>\n<h2>Flexbox Support<\/h2>\n<p>Although experimental, Toolkit offers built-in flexbox support through the <a href=\"http://titon.io/en/toolkit/2.1.0/components/flex\">Flex component<\/a>. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.<\/p>\n<h2>Feature Packed<\/h2>\n<p>Besides the highlights already mentioned, Toolkit supports an array of features that include:<\/p>\n<p>If you&rsquo;d like to test out some of Toolkit&rsquo;s components, you can visit <a href=\"http://demo.titon.io/\">this interactive demo page<\/a>.<\/p>\n<h2>Down the Pipeline<\/h2>\n<p>The JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, <a href=\"https://github.com/titon/toolkit/issues/107\">some of which have already started development<\/a>.<\/p>\n<ul> <li>Target evergreen browsers and their previous 3 releases.<\/li> <li>Remove jQuery as a dependency and polyfill any functionality not present.<\/li> <li>Rewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.<\/li> <li>Integrate Babel for ES6 -&gt; ES5 compilation.<\/li> <li>Integrate template rendering instead of DOM manipulation.<\/li> <li>Look into using <a href=\"http://webpack.github.io/\">webpack<\/a> as the bundler and build tool.<\/li> <li>Add Less support by integrating a Sass to Less transpiler.<\/li> <li>Rewrite components using a flux-based uni-directional data flow system<\/li> <\/ul>\n<p>There&rsquo;s also some discussion about integrating with external frameworks, but this is currently under RFC.<\/p>\n<ul> <li><a href=\"http://polyfill.io\">Polyfill<\/a> integration for missing browser features <\/li> <li>Custom web components through <a href=\"https://www.polymer-project.org/\">Polymer<\/a> or another service<\/li> <li><a href=\"http://facebook.github.io/react/\">React<\/a> and Toolkit component integration<\/li> <\/ul>\n<p>Why not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I&rsquo;m always looking for new team members and contributors, so if you&rsquo;re interested, come chat in #titon on freenode.net.<\/p>\n<h2>In Closing<\/h2>\n<p>It&rsquo;s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you&rsquo;re looking for any more information on Toolkit, I suggest visiting the <a href=\"http://titon.io/en/toolkit\">official website<\/a>, <a href=\"https://twitter.com/projecttiton\">our Twitter account<\/a>, or <a href=\"https://github.com/titon/toolkit\">the GitHub repo<\/a>. Cheers!<\/p>","date":"Tue, 24 Mar 2015 00:00:00 GMT","type":"article","resolvedPageUrl":"http://www.sitepoint.com/toolkit-front-end-framework-modern-web/","docId":43360616431,"gburl":"http://www.sitepoint.com/?p=101740-diffbotxyz3863447284","lastCrawlTimeUTC":1432078247,"timestamp":"Tue, 19 May 2015 23:30:47 GMT"}
,
{"tags":[{"id":915685,"count":11,"prevalence":1.064516129032258,"label":"JavaScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/JavaScript"},{"id":185108,"count":10,"prevalence":0.967741935483871,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":80318,"count":4,"prevalence":0.3870967741935484,"label":"HTML","uri":"http://dbpedia.org/resource/HTML"},{"id":885421,"count":1,"prevalence":0.0967741935483871,"label":"HTML5","uri":"http://dbpedia.org/resource/HTML5"},{"id":1053273,"count":1,"prevalence":0.0967741935483871,"label":"MooTools","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/MooTools"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","author":"Miles Johnson","text":"Titon Toolkit, or simply Toolkit, is a project that I\u2019ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of \u201cCSS/JavaScript frameworks\u201d was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.\nSo, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology \u2014 HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.\nThe core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.\nSo, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: Toolkit was built to be extremely extensible, easily customizable, and efficiently architected.\nLet\u2019s look at some of its unique features.\nDecoupled JavaScript, CSS, and HTML\nA running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes \u2014 all of which are used for element traversal, look-up, and event binding.\nThe following example uses Toolkit\u2019s carousel component as a proof of concept.\nWith decoupling in place, custom HTML is now possible, which isn\u2019t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via data-* attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.\nEasier CSS Styling\nTired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly \u2014 mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.\nFurthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit\u2019s Sass files to be imported into scope and compiled directly in your own Sass files.\nCustomizable CSS Class Names\nAnother pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.\nThe first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.\nThe second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.\nDo note, however, that namespaces are not applied to state, animation, or behavioral class names.\nExtensible JavaScript\nThe entire JavaScript layer in Toolkit is built around a flexible inheritance based object-oriented class system. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.\nOn top of this, each class supports a set of options for customizability. These options can be set globally, through the constructor, or as data attributes. Option groups and even responsive options are built into the core.\nFlexbox Support\nAlthough experimental, Toolkit offers built-in flexbox support through the Flex component. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.\nFeature Packed\nBesides the highlights already mentioned, Toolkit supports an array of features that include:\nIf you\u2019d like to test out some of Toolkit\u2019s components, you can visit this interactive demo page.\nDown the Pipeline\nThe JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, some of which have already started development.\nTarget evergreen browsers and their previous 3 releases.\nRemove jQuery as a dependency and polyfill any functionality not present.\nRewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.\nIntegrate Babel for ES6 -> ES5 compilation.\nIntegrate template rendering instead of DOM manipulation.\nLook into using webpack as the bundler and build tool.\nAdd Less support by integrating a Sass to Less transpiler.\nRewrite components using a flux-based uni-directional data flow system\nThere\u2019s also some discussion about integrating with external frameworks, but this is currently under RFC.\nPolyfill integration for missing browser features\nCustom web components through Polymer or another service\nReact and Toolkit component integration\nWhy not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I\u2019m always looking for new team members and contributors, so if you\u2019re interested, come chat in #titon on freenode.net.\nIn Closing\nIt\u2019s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you\u2019re looking for any more information on Toolkit, I suggest visiting the official website, our Twitter account, or the GitHub repo. Cheers!","title":"Toolkit: A Front-End Framework for the Modern Web","diffbotUri":"article|3|-839743441","pageUrl":"http://www.sitepoint.com/?p=101740","metaTags":[{"name":"css framework"},{"name":"css toolkit"},{"name":"frontend framework"},{"name":"LouisL"}],"images":[{"title":"Titon Toolkit website","height":487,"diffbotUri":"image|3|-166182215","naturalHeight":500,"width":780,"primary":true,"naturalWidth":800,"url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png"}],"humanLanguage":"en","html":"<p><a href=\"http://titon.io/en/toolkit\">Titon Toolkit<\/a>, or simply Toolkit, is a project that I&rsquo;ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of &ldquo;CSS/JavaScript frameworks&rdquo; was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.<\/p>\n<p>So, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology &mdash; HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.<\/p>\n<figure><a href=\"http://titon.io/en/toolkit\"><img alt=\"Titon Toolkit website\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png\"><\/img><\/a><figcaption><a href=\"http://titon.io/en/toolkit\">Titon Toolkit website<\/a><\/figcaption><\/figure>\n<p>The core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.<\/p>\n<p>So, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: <strong>Toolkit was built to be extremely extensible, easily customizable, and efficiently architected<\/strong>.<\/p>\n<p>Let&rsquo;s look at some of its unique features.<\/p>\n<h2>Decoupled JavaScript, CSS, and HTML<\/h2>\n<p>A running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes &mdash; all of which are used for element traversal, look-up, and event binding.<\/p>\n<p>The following example uses <a href=\"http://titon.io/en/toolkit/2.1.0/components/carousel\">Toolkit&rsquo;s carousel component<\/a> as a proof of concept.<\/p>\n<p>With decoupling in place, custom HTML is now possible, which isn&rsquo;t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via <code>data-*<\/code> attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.<\/p>\n<h2>Easier CSS Styling<\/h2>\n<p>Tired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly &mdash; mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.<\/p>\n<p>Furthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit&rsquo;s Sass files to be imported into scope and compiled directly in your own Sass files.<\/p>\n<h2>Customizable CSS Class Names<\/h2>\n<p>Another pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.<\/p>\n<p>The first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.<\/p>\n<p>The second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.<\/p>\n<p>Do note, however, that namespaces are not applied to state, animation, or behavioral class names.<\/p>\n<h2>Extensible JavaScript<\/h2>\n<p>The entire JavaScript layer in Toolkit is built around a flexible inheritance based <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/class\">object-oriented class system<\/a>. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.<\/p>\n<p>On top of this, each class supports a set of <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/base#options\">options for customizability<\/a>. These options can be set globally, through the constructor, <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/component#options\">or as data attributes<\/a>. Option groups and even responsive options are built into the core.<\/p>\n<h2>Flexbox Support<\/h2>\n<p>Although experimental, Toolkit offers built-in flexbox support through the <a href=\"http://titon.io/en/toolkit/2.1.0/components/flex\">Flex component<\/a>. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.<\/p>\n<h2>Feature Packed<\/h2>\n<p>Besides the highlights already mentioned, Toolkit supports an array of features that include:<\/p>\n<p>If you&rsquo;d like to test out some of Toolkit&rsquo;s components, you can visit <a href=\"http://demo.titon.io/\">this interactive demo page<\/a>.<\/p>\n<h2>Down the Pipeline<\/h2>\n<p>The JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, <a href=\"https://github.com/titon/toolkit/issues/107\">some of which have already started development<\/a>.<\/p>\n<ul> <li>Target evergreen browsers and their previous 3 releases.<\/li> <li>Remove jQuery as a dependency and polyfill any functionality not present.<\/li> <li>Rewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.<\/li> <li>Integrate Babel for ES6 -&gt; ES5 compilation.<\/li> <li>Integrate template rendering instead of DOM manipulation.<\/li> <li>Look into using <a href=\"http://webpack.github.io/\">webpack<\/a> as the bundler and build tool.<\/li> <li>Add Less support by integrating a Sass to Less transpiler.<\/li> <li>Rewrite components using a flux-based uni-directional data flow system<\/li> <\/ul>\n<p>There&rsquo;s also some discussion about integrating with external frameworks, but this is currently under RFC.<\/p>\n<ul> <li><a href=\"http://polyfill.io\">Polyfill<\/a> integration for missing browser features <\/li> <li>Custom web components through <a href=\"https://www.polymer-project.org/\">Polymer<\/a> or another service<\/li> <li><a href=\"http://facebook.github.io/react/\">React<\/a> and Toolkit component integration<\/li> <\/ul>\n<p>Why not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I&rsquo;m always looking for new team members and contributors, so if you&rsquo;re interested, come chat in #titon on freenode.net.<\/p>\n<h2>In Closing<\/h2>\n<p>It&rsquo;s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you&rsquo;re looking for any more information on Toolkit, I suggest visiting the <a href=\"http://titon.io/en/toolkit\">official website<\/a>, <a href=\"https://twitter.com/projecttiton\">our Twitter account<\/a>, or <a href=\"https://github.com/titon/toolkit\">the GitHub repo<\/a>. Cheers!<\/p>","date":"Tue, 24 Mar 2015 00:00:00 GMT","type":"article","resolvedPageUrl":"http://www.sitepoint.com/toolkit-front-end-framework-modern-web/","docId":43360616431,"gburl":"http://www.sitepoint.com/?p=101740-diffbotxyz3863447284","lastCrawlTimeUTC":1432167771,"timestamp":"Thu, 21 May 2015 00:22:51 GMT"}
,
{"tags":[{"id":915685,"count":11,"prevalence":1.064516129032258,"label":"JavaScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/JavaScript"},{"id":185108,"count":10,"prevalence":0.967741935483871,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":80318,"count":4,"prevalence":0.3870967741935484,"label":"HTML","uri":"http://dbpedia.org/resource/HTML"},{"id":885421,"count":1,"prevalence":0.0967741935483871,"label":"HTML5","uri":"http://dbpedia.org/resource/HTML5"},{"id":1053273,"count":1,"prevalence":0.0967741935483871,"label":"MooTools","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/MooTools"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","author":"Miles Johnson","text":"Titon Toolkit, or simply Toolkit, is a project that I\u2019ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of \u201cCSS/JavaScript frameworks\u201d was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.\nSo, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology \u2014 HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.\nThe core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.\nSo, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: Toolkit was built to be extremely extensible, easily customizable, and efficiently architected.\nLet\u2019s look at some of its unique features.\nDecoupled JavaScript, CSS, and HTML\nA running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes \u2014 all of which are used for element traversal, look-up, and event binding.\nThe following example uses Toolkit\u2019s carousel component as a proof of concept.\nWith decoupling in place, custom HTML is now possible, which isn\u2019t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via data-* attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.\nEasier CSS Styling\nTired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly \u2014 mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.\nFurthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit\u2019s Sass files to be imported into scope and compiled directly in your own Sass files.\nCustomizable CSS Class Names\nAnother pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.\nThe first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.\nThe second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.\nDo note, however, that namespaces are not applied to state, animation, or behavioral class names.\nExtensible JavaScript\nThe entire JavaScript layer in Toolkit is built around a flexible inheritance based object-oriented class system. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.\nOn top of this, each class supports a set of options for customizability. These options can be set globally, through the constructor, or as data attributes. Option groups and even responsive options are built into the core.\nFlexbox Support\nAlthough experimental, Toolkit offers built-in flexbox support through the Flex component. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.\nFeature Packed\nBesides the highlights already mentioned, Toolkit supports an array of features that include:\nIf you\u2019d like to test out some of Toolkit\u2019s components, you can visit this interactive demo page.\nDown the Pipeline\nThe JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, some of which have already started development.\nTarget evergreen browsers and their previous 3 releases.\nRemove jQuery as a dependency and polyfill any functionality not present.\nRewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.\nIntegrate Babel for ES6 -> ES5 compilation.\nIntegrate template rendering instead of DOM manipulation.\nLook into using webpack as the bundler and build tool.\nAdd Less support by integrating a Sass to Less transpiler.\nRewrite components using a flux-based uni-directional data flow system\nThere\u2019s also some discussion about integrating with external frameworks, but this is currently under RFC.\nPolyfill integration for missing browser features\nCustom web components through Polymer or another service\nReact and Toolkit component integration\nWhy not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I\u2019m always looking for new team members and contributors, so if you\u2019re interested, come chat in #titon on freenode.net.\nIn Closing\nIt\u2019s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you\u2019re looking for any more information on Toolkit, I suggest visiting the official website, our Twitter account, or the GitHub repo. Cheers!","title":"Toolkit: A Front-End Framework for the Modern Web","diffbotUri":"article|3|-839743441","pageUrl":"http://www.sitepoint.com/toolkit-front-end-framework-modern-web/","metaTags":[{"name":"css framework"},{"name":"css toolkit"},{"name":"frontend framework"},{"name":"LouisL"}],"images":[{"title":"Titon Toolkit website","height":487,"diffbotUri":"image|3|-166182215","naturalHeight":500,"width":780,"primary":true,"naturalWidth":800,"url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png"}],"humanLanguage":"en","html":"<p><a href=\"http://titon.io/en/toolkit\">Titon Toolkit<\/a>, or simply Toolkit, is a project that I&rsquo;ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of &ldquo;CSS/JavaScript frameworks&rdquo; was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.<\/p>\n<p>So, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology &mdash; HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.<\/p>\n<figure><a href=\"http://titon.io/en/toolkit\"><img alt=\"Titon Toolkit website\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png\"><\/img><\/a><figcaption><a href=\"http://titon.io/en/toolkit\">Titon Toolkit website<\/a><\/figcaption><\/figure>\n<p>The core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.<\/p>\n<p>So, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: <strong>Toolkit was built to be extremely extensible, easily customizable, and efficiently architected<\/strong>.<\/p>\n<p>Let&rsquo;s look at some of its unique features.<\/p>\n<h2>Decoupled JavaScript, CSS, and HTML<\/h2>\n<p>A running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes &mdash; all of which are used for element traversal, look-up, and event binding.<\/p>\n<p>The following example uses <a href=\"http://titon.io/en/toolkit/2.1.0/components/carousel\">Toolkit&rsquo;s carousel component<\/a> as a proof of concept.<\/p>\n<p>With decoupling in place, custom HTML is now possible, which isn&rsquo;t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via <code>data-*<\/code> attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.<\/p>\n<h2>Easier CSS Styling<\/h2>\n<p>Tired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly &mdash; mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.<\/p>\n<p>Furthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit&rsquo;s Sass files to be imported into scope and compiled directly in your own Sass files.<\/p>\n<h2>Customizable CSS Class Names<\/h2>\n<p>Another pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.<\/p>\n<p>The first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.<\/p>\n<p>The second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.<\/p>\n<p>Do note, however, that namespaces are not applied to state, animation, or behavioral class names.<\/p>\n<h2>Extensible JavaScript<\/h2>\n<p>The entire JavaScript layer in Toolkit is built around a flexible inheritance based <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/class\">object-oriented class system<\/a>. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.<\/p>\n<p>On top of this, each class supports a set of <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/base#options\">options for customizability<\/a>. These options can be set globally, through the constructor, <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/component#options\">or as data attributes<\/a>. Option groups and even responsive options are built into the core.<\/p>\n<h2>Flexbox Support<\/h2>\n<p>Although experimental, Toolkit offers built-in flexbox support through the <a href=\"http://titon.io/en/toolkit/2.1.0/components/flex\">Flex component<\/a>. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.<\/p>\n<h2>Feature Packed<\/h2>\n<p>Besides the highlights already mentioned, Toolkit supports an array of features that include:<\/p>\n<p>If you&rsquo;d like to test out some of Toolkit&rsquo;s components, you can visit <a href=\"http://demo.titon.io/\">this interactive demo page<\/a>.<\/p>\n<h2>Down the Pipeline<\/h2>\n<p>The JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, <a href=\"https://github.com/titon/toolkit/issues/107\">some of which have already started development<\/a>.<\/p>\n<ul> <li>Target evergreen browsers and their previous 3 releases.<\/li> <li>Remove jQuery as a dependency and polyfill any functionality not present.<\/li> <li>Rewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.<\/li> <li>Integrate Babel for ES6 -&gt; ES5 compilation.<\/li> <li>Integrate template rendering instead of DOM manipulation.<\/li> <li>Look into using <a href=\"http://webpack.github.io/\">webpack<\/a> as the bundler and build tool.<\/li> <li>Add Less support by integrating a Sass to Less transpiler.<\/li> <li>Rewrite components using a flux-based uni-directional data flow system<\/li> <\/ul>\n<p>There&rsquo;s also some discussion about integrating with external frameworks, but this is currently under RFC.<\/p>\n<ul> <li><a href=\"http://polyfill.io\">Polyfill<\/a> integration for missing browser features <\/li> <li>Custom web components through <a href=\"https://www.polymer-project.org/\">Polymer<\/a> or another service<\/li> <li><a href=\"http://facebook.github.io/react/\">React<\/a> and Toolkit component integration<\/li> <\/ul>\n<p>Why not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I&rsquo;m always looking for new team members and contributors, so if you&rsquo;re interested, come chat in #titon on freenode.net.<\/p>\n<h2>In Closing<\/h2>\n<p>It&rsquo;s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you&rsquo;re looking for any more information on Toolkit, I suggest visiting the <a href=\"http://titon.io/en/toolkit\">official website<\/a>, <a href=\"https://twitter.com/projecttiton\">our Twitter account<\/a>, or <a href=\"https://github.com/titon/toolkit\">the GitHub repo<\/a>. Cheers!<\/p>","date":"Tue, 24 Mar 2015 00:00:00 GMT","type":"article","docId":168559837131,"gburl":"http://www.sitepoint.com/toolkit-front-end-framework-modern-web/-diffbotxyz3863447284","lastCrawlTimeUTC":1432071345,"timestamp":"Tue, 19 May 2015 21:35:45 GMT"}
,
{"tags":[{"id":915685,"count":11,"prevalence":1.064516129032258,"label":"JavaScript","type":"Http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#InformationEntity","uri":"http://dbpedia.org/resource/JavaScript"},{"id":185108,"count":10,"prevalence":0.967741935483871,"label":"Cascading Style Sheets","uri":"http://dbpedia.org/resource/Cascading_Style_Sheets"},{"id":80318,"count":4,"prevalence":0.3870967741935484,"label":"HTML","uri":"http://dbpedia.org/resource/HTML"},{"id":885421,"count":1,"prevalence":0.0967741935483871,"label":"HTML5","uri":"http://dbpedia.org/resource/HTML5"},{"id":1053273,"count":1,"prevalence":0.0967741935483871,"label":"MooTools","type":"Http://wikidata.dbpedia.org/resource/Q386724","uri":"http://dbpedia.org/resource/MooTools"}],"icon":"http://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/apple-touch-icon-144x144-precomposed.png","author":"Miles Johnson","text":"Titon Toolkit, or simply Toolkit, is a project that I\u2019ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of \u201cCSS/JavaScript frameworks\u201d was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.\nSo, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology \u2014 HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.\nThe core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.\nSo, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: Toolkit was built to be extremely extensible, easily customizable, and efficiently architected.\nLet\u2019s look at some of its unique features.\nDecoupled JavaScript, CSS, and HTML\nA running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes \u2014 all of which are used for element traversal, look-up, and event binding.\nThe following example uses Toolkit\u2019s carousel component as a proof of concept.\nWith decoupling in place, custom HTML is now possible, which isn\u2019t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via data-* attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.\nEasier CSS Styling\nTired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly \u2014 mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.\nFurthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit\u2019s Sass files to be imported into scope and compiled directly in your own Sass files.\nCustomizable CSS Class Names\nAnother pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.\nThe first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.\nThe second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.\nDo note, however, that namespaces are not applied to state, animation, or behavioral class names.\nExtensible JavaScript\nThe entire JavaScript layer in Toolkit is built around a flexible inheritance based object-oriented class system. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.\nOn top of this, each class supports a set of options for customizability. These options can be set globally, through the constructor, or as data attributes. Option groups and even responsive options are built into the core.\nFlexbox Support\nAlthough experimental, Toolkit offers built-in flexbox support through the Flex component. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.\nFeature Packed\nBesides the highlights already mentioned, Toolkit supports an array of features that include:\nIf you\u2019d like to test out some of Toolkit\u2019s components, you can visit this interactive demo page.\nDown the Pipeline\nThe JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, some of which have already started development.\nTarget evergreen browsers and their previous 3 releases.\nRemove jQuery as a dependency and polyfill any functionality not present.\nRewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.\nIntegrate Babel for ES6 -> ES5 compilation.\nIntegrate template rendering instead of DOM manipulation.\nLook into using webpack as the bundler and build tool.\nAdd Less support by integrating a Sass to Less transpiler.\nRewrite components using a flux-based uni-directional data flow system\nThere\u2019s also some discussion about integrating with external frameworks, but this is currently under RFC.\nPolyfill integration for missing browser features\nCustom web components through Polymer or another service\nReact and Toolkit component integration\nWhy not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I\u2019m always looking for new team members and contributors, so if you\u2019re interested, come chat in #titon on freenode.net.\nIn Closing\nIt\u2019s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you\u2019re looking for any more information on Toolkit, I suggest visiting the official website, our Twitter account, or the GitHub repo. Cheers!","title":"Toolkit: A Front-End Framework for the Modern Web","diffbotUri":"article|3|-839743441","pageUrl":"http://www.sitepoint.com/toolkit-front-end-framework-modern-web/","metaTags":[{"name":"css framework"},{"name":"css toolkit"},{"name":"frontend framework"},{"name":"LouisL"}],"images":[{"title":"Titon Toolkit website","height":487,"diffbotUri":"image|3|-166182215","naturalHeight":500,"width":780,"primary":true,"naturalWidth":800,"url":"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png"}],"humanLanguage":"en","html":"<p><a href=\"http://titon.io/en/toolkit\">Titon Toolkit<\/a>, or simply Toolkit, is a project that I&rsquo;ve been working on in my free time for the past 4 years. It started out as a MooTools UI framework, which slowly transitioned to jQuery, with plans to be vendorless for 3.0. So why did I write another framework? At its inception, the world of &ldquo;CSS/JavaScript frameworks&rdquo; was still young, with Bootstrap and Foundation being about a year old. I was intrigued with the concept of a front-end framework and set out to build my own, with the main selling point being customizability and extensibility.<\/p>\n<p>So, what is Toolkit exactly? Toolkit is a front-end framework that provides a collection of powerful state-based, role-specific user interface components and utility classes for the responsive, mobile, and modern web. It makes use of the latest and greatest in technology &mdash; HTML5 for semantics, CSS3 for animations and styles, Sass for CSS pre-processing, Gulp for task and package management, and powerful new browser APIs for the JavaScript layer, just to name a few.<\/p>\n<figure><a href=\"http://titon.io/en/toolkit\"><img alt=\"Titon Toolkit website\" src=\"http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/03/1426722294titon-toolkit.png\"><\/img><\/a><figcaption><a href=\"http://titon.io/en/toolkit\">Titon Toolkit website<\/a><\/figcaption><\/figure>\n<p>The core of Toolkit is based on strict but important design principles, which include responsive design, mobile-first design, semantic markup, progressive enhancement, graceful degradation, continuous integration, and configuration over convention. These principles ultimately shape the decisions behind Toolkit.<\/p>\n<p>So, is Toolkit just another front-end UI framework? Yes but, as mentioned, with some key differences: <strong>Toolkit was built to be extremely extensible, easily customizable, and efficiently architected<\/strong>.<\/p>\n<p>Let&rsquo;s look at some of its unique features.<\/p>\n<h2>Decoupled JavaScript, CSS, and HTML<\/h2>\n<p>A running paradigm in front-end development is tying JavaScript to a fixed CSS structure via class names as well as a fixed HTML structure. Toolkit disagrees with this approach and strives to decouple the CSS, JavaScript, and HTML as much as possible, which opens up the possibility of customizable alternatives. Toolkit mitigates many coupling issues by requiring specific data attributes &mdash; all of which are used for element traversal, look-up, and event binding.<\/p>\n<p>The following example uses <a href=\"http://titon.io/en/toolkit/2.1.0/components/carousel\">Toolkit&rsquo;s carousel component<\/a> as a proof of concept.<\/p>\n<p>With decoupling in place, custom HTML is now possible, which isn&rsquo;t the case when using alternative frameworks. No longer is the markup tied to the JavaScript component; the JavaScript component is now tied to the markup via <code>data-*<\/code> attributes. Want to add new markup to a component? Go for it! Want to change the markup to match the project? Feel free! Want to remove component functionality? Remove away! Data attributes provide what we think is a much better level of customization.<\/p>\n<h2>Easier CSS Styling<\/h2>\n<p>Tired of having to overwrite styles? Or dealing with bloat? Toolkit sure was. Because of this, the CSS found in Toolkit is extremely lightweight as it only defines the very bare minimum for the component to function correctly &mdash; mainly layout and structural styles. You could say that Toolkit is a themeless and styleless front-end framework. By being themeless, Toolkit is easy to style, and even easier to integrate.<\/p>\n<p>Furthermore, Toolkit opted out of providing Sass variables for CSS theme customization (e.g. for border size, background color, text size, font family, etc). If you want to style an element, you can do so the old fashioned way, using CSS (or Sass, or Less)! You can also take this a step further by integrating Toolkit as a Compass extension, which allows for Toolkit&rsquo;s Sass files to be imported into scope and compiled directly in your own Sass files.<\/p>\n<h2>Customizable CSS Class Names<\/h2>\n<p>Another pain point found in existing frameworks is CSS class name collision. Toolkit resolves this issue in one of two ways.<\/p>\n<p>The first way is through customizable Sass variables that allow most CSS class names to be customized. Using this approach will require compilation of the Sass files, either through a Compass extension, or in the source directly.<\/p>\n<p>The second approach allows for global namespacing by prefixing classes. This works wonders when integrating the framework into an existing codebase where collisions are abundant. Enabling namespaces is as easy as modifying a Sass variable and a JavaScript property.<\/p>\n<p>Do note, however, that namespaces are not applied to state, animation, or behavioral class names.<\/p>\n<h2>Extensible JavaScript<\/h2>\n<p>The entire JavaScript layer in Toolkit is built around a flexible inheritance based <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/class\">object-oriented class system<\/a>. Each class manages its own state, events, and behaviors, which allow for complex interactions as each instance is unique. Since this class layer is so flexible, it allows for custom classes to be written, or existing classes to be extended via inheritance.<\/p>\n<p>On top of this, each class supports a set of <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/base#options\">options for customizability<\/a>. These options can be set globally, through the constructor, <a href=\"http://titon.io/en/toolkit/2.1.0/development/js/component#options\">or as data attributes<\/a>. Option groups and even responsive options are built into the core.<\/p>\n<h2>Flexbox Support<\/h2>\n<p>Although experimental, Toolkit offers built-in flexbox support through the <a href=\"http://titon.io/en/toolkit/2.1.0/components/flex\">Flex component<\/a>. The Flex component shines in the building of layout and grid based structures through the concept of regions and blocks. A region is an object that contains blocks or other regions, while a block is an object that contains content and is aligned within the main and cross axis. Although being analogous to rows and columns, regions and blocks are packaged with additional support for growing, shrinking, ordering, wrapping, nesting, alignment, and responsiveness.<\/p>\n<h2>Feature Packed<\/h2>\n<p>Besides the highlights already mentioned, Toolkit supports an array of features that include:<\/p>\n<p>If you&rsquo;d like to test out some of Toolkit&rsquo;s components, you can visit <a href=\"http://demo.titon.io/\">this interactive demo page<\/a>.<\/p>\n<h2>Down the Pipeline<\/h2>\n<p>The JavaScript ecosphere is constantly evolving with new technology, functionality, and specifications. Toolkit aims to be a part of this evolution by continuously staying in sync with the latest JavaScript developments. The roadmap as it currently stands includes the following breaking, but interesting, changes for the next 3.0 major release, <a href=\"https://github.com/titon/toolkit/issues/107\">some of which have already started development<\/a>.<\/p>\n<ul> <li>Target evergreen browsers and their previous 3 releases.<\/li> <li>Remove jQuery as a dependency and polyfill any functionality not present.<\/li> <li>Rewrite the JavaScript layer using ECMAScript 6 functionality like classes, arrow functions, modules, generators, promises, and more.<\/li> <li>Integrate Babel for ES6 -&gt; ES5 compilation.<\/li> <li>Integrate template rendering instead of DOM manipulation.<\/li> <li>Look into using <a href=\"http://webpack.github.io/\">webpack<\/a> as the bundler and build tool.<\/li> <li>Add Less support by integrating a Sass to Less transpiler.<\/li> <li>Rewrite components using a flux-based uni-directional data flow system<\/li> <\/ul>\n<p>There&rsquo;s also some discussion about integrating with external frameworks, but this is currently under RFC.<\/p>\n<ul> <li><a href=\"http://polyfill.io\">Polyfill<\/a> integration for missing browser features <\/li> <li>Custom web components through <a href=\"https://www.polymer-project.org/\">Polymer<\/a> or another service<\/li> <li><a href=\"http://facebook.github.io/react/\">React<\/a> and Toolkit component integration<\/li> <\/ul>\n<p>Why not help my work on Toolkit by offering some advice on the direction it should take? Community feedback and contributions are very much appreciated! I&rsquo;m always looking for new team members and contributors, so if you&rsquo;re interested, come chat in #titon on freenode.net.<\/p>\n<h2>In Closing<\/h2>\n<p>It&rsquo;s been a wonderful experience showcasing Toolkit and its features to all of you. I hope you enjoyed it and find as much use out of Toolkit as I have. If you&rsquo;re looking for any more information on Toolkit, I suggest visiting the <a href=\"http://titon.io/en/toolkit\">official website<\/a>, <a href=\"https://twitter.com/projecttiton\">our Twitter account<\/a>, or <a href=\"https://github.com/titon/toolkit\">the GitHub repo<\/a>. Cheers!<\/p>","date":"Tue, 24 Mar 2015 00:00:00 GMT","type":"article","docId":168559837131,"gburl":"http://www.sitepoint.com/toolkit-front-end-framework-modern-web/-diffbotxyz3863447284","lastCrawlTimeUTC":1432161262,"timestamp":"Wed, 20 May 2015 22:34:22 GMT"}
]
}
